INHERITANCE:
->Inheritance is a pillar of OOP which enables a class tobaquirevthe properties and behaviours of another class.
->In java inheritance is also known as is-A-relationship and can be acheived with help of extend keyword.
1.single level inheritance
class Person 
{   
    // Attributes
  
    String name;
    
    // Behaviors
    public void introduce() 
    {
        System.out.println("Hello, my name is " + name + ".");
    }
}

class Professor extends Person 
{
    // Additional attributes
    String department;
    // Additional behaviors
    public void conductLecture() 
    {
        System.out.println(name + " is conducting a lecture.");
    }
}

class Main
{
  public static void main(String[] args)
  {
    // Create and instantiate Professor object
    Professor professor = new Professor();
    professor.name = "Harish Pathak";
    professor.department = "Computer Science";
    
    System.out.println("Professor Name: " + professor.name);
    System.out.println("Department: " + professor.department);
    professor.introduce();
    professor.conductLecture();
    
  }
}

2. MULTI LEVEL INHERITANCE
-> Parent class is inherit to two sub classes
public class inher {
    public static void main(String[] args) {
        SeniorManager SM=new SeniorManager();
        SM.project="detection system";
        SM.emp_id=102;
        SM.name="anusah";
       System.out.println(SM.project + " " + SM.emp_id +  SM.name);
       SM.dispalyseniorManagerDetails();
       SM.displayEmployeeDetails();
    }
}
class Employee{
    String name;
    int emp_id;
    public void displayEmployeeDetails(){
        
    }
}
class Manager extends Employee{
    int teamSize;

    public void dispalyManagerDetails(){

    }
}
class SeniorManager extends Employee{
    String project;

    public void dispalyseniorManagerDetails(){

    }

}

3.Heirachial inheritance-it has one parent class and multiple child classes
class Person 
{   
    String name;
    void introduce() 
    {
        System.out.println("Hello, my name is " + name + ".");
    }
}
class Professor extends Person 
{
    // Additional attributes
    String department;
    void conductLecture() 
    {
        System.out.println(name + " is conducting a lecture.");
    }
}
class Student extends Person 
{
    // Additional attributes
    String major;
    void attendLecture() 
    {
        System.out.println(name + " is attending a lecture.");
    }
}
class Main
{
  public static void main(String[] args)
  {
    Professor professor = new Professor();
    professor.name = "Harish Pathak";
    professor.department = "Computer Science";
    System.out.println("Professor Name: " + professor.name);
    System.out.println("Department: " + professor.department);
    professor.introduce();
    professor.conductLecture();

    Student student = new Student();
    student.name = "Priya Sharma";
    student.major = "Computer Science";
    System.out.println("Student Name: " + student.name);
    System.out.println("Major: " + student.major);
    student.introduce();
    student.attendLecture();
  }
}

4.HYBRID INHERITANCE - It is a combination of two or more types of inheritance
class Person 
{   
    String name;
    
    void introduce() 
    {
        System.out.println("Hello, my name is " + name + ".");
    }
}
class Professor extends Person 
{
    String department;
    
    void conductLecture() 
    {
        System.out.println(name + " is conducting a lecture.");
    }
}
class Student extends Person 
{
    String major;
    void attendLecture() 
    {
        System.out.println(name + " is attending a lecture.");
    }
}
class ResearchAssistant extends Student 
{
    String researchTopic;
    void conductLecture() 
    {
        System.out.println(name + " is conducting a lecture as a research assistant.");
    }
}
class Main
{
  public static void main(String[] args)
  {
    Professor professor = new Professor();
    professor.name = "Harish Pathak";
    professor.department = "Computer Science";
    
    System.out.println("Professor Name: " + professor.name);
    System.out.println("Department: " + professor.department);
    professor.introduce();
    professor.conductLecture();

    Student student = new Student();
    student.name = "Priya Sharma";
    student.major = "Computer Science";
    
    System.out.println("Student Name: " + student.name);
    System.out.println("Major: " + student.major);
    student.introduce();
    student.attendLecture();
    
    ResearchAssistant ra = new ResearchAssistant();
    ra.name = "John Doe";
    ra.major = "Computer Science";
    ra.researchTopic = "Artificial Intelligence";

    System.out.println("ResearchAssistant Name: " + ra.name);
    System.out.println("Major: " + ra.major);
    System.out.println("Research Topic: " + ra.researchTopic);
    ra.introduce();
    ra.attendLecture();
    ra.conductLecture();
  }
}


5.MULTIPLE INHERITANCE -if a single class is tries to inherit multiple parent classes
class A {
    void display() {
        System.out.println("Display from A");
    }
}

class B extends A {
    void display() {
        System.out.println("Display from B");
    }
}

class C extends A {
    void display() {
        System.out.println("Display from C");
    }
}

// Hypothetical code, not allowed in Java
class D extends B, C {
    // Which display() method should be inherited?
}
public class Main {
    public static void main(String[] args) {
        D obj = new D();
        obj.display(); // Ambiguity: Should it call B's display or C's display?
    }
}

--> In java multiple inheritance is not suppoerted because of diamond problem
      A
/          \
B           C
\          /
      D
-->The diamond problem is a ambuiguity that arises in multiple inheritance. It  Occurs when a class is inherited from more 
than one parent class.
--> The abiguity arises becuase class D inherited from B, C ,which both inherit from A. If D class dispaly (), its unclear 
that which display method should inherited.
Override-Inherited from parent class and use after modifying it
